{"version":3,"sources":["LineChartSample.js","BarChartSample.js","App.js","serviceWorker.js","index.js"],"names":["LineChartSample","width","height","data","name","日平均","日最高","日最低","strokeDasharray","dataKey","interval","unit","type","stroke","activeDot","r","BarChartSample","margin","top","right","left","bottom","fill","App","className","style","marginTop","display","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6ec94d31.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  CartesianGrid,\n  Legend,\n  YAxis,\n  Tooltip,\n} from 'recharts';\n\nexport const LineChartSample = () => {\n  const data = [\n    {\n      name: 1,\n      日平均: 5.6,\n      日最高: 10.3,\n      日最低: 1.4,\n    },\n    {\n      name: 2,\n      日平均: 7.2,\n      日最高: 11.6,\n      日最低: 3.3,\n    },\n    {\n      name: 3,\n      日平均: 10.6,\n      日最高: 15.4,\n      日最低: 6.2,\n    },\n    {\n      name: 4,\n      日平均: 13.6,\n      日最高: 19.0,\n      日最低: 9.2,\n    },\n    {\n      name: 5,\n      日平均: 20.0,\n      日最高: 25.3,\n      日最低: 15.3,\n    },\n    {\n      name: 6,\n      日平均: 21.8,\n      日最高: 25.8,\n      日最低: 18.5,\n    },\n    {\n      name: 7,\n      日平均: 24.1,\n      日最高: 27.5,\n      日最低: 21.6,\n    },\n    {\n      name: 8,\n      日平均: 28.4,\n      日最高: 32.8,\n      日最低: 25.2,\n    },\n    {\n      name: 9,\n      日平均: 25.1,\n      日最高: 29.4,\n      日最低: 21.7,\n    },\n    {\n      name: 10,\n      日平均: 19.4,\n      日最高: 23.3,\n      日最低: 16.4,\n    },\n    {\n      name: 11,\n      日平均: 13.1,\n      日最高: 17.7,\n      日最低: 9.3,\n    },\n    {\n      name: 12,\n      日平均: 8.5,\n      日最高: 12.6,\n      日最低: 5.2,\n    },\n  ];\n\n  return (\n    <div>\n      <h1>2019年 東京の平均気温(円グラフ)</h1>\n      <LineChart width={700} height={500} data={data}>\n        <CartesianGrid strokeDasharray='3 3' />\n        <XAxis dataKey='name' interval='preserveStartEnd' unit='月' />\n        <YAxis interval='preserveStartEnd' unit='℃' />\n        <Tooltip />\n        <Legend />\n        <Line\n          type='monotone'\n          dataKey='日平均'\n          stroke='#82ca9d'\n          activeDot={{ r: 3 }}\n        />\n        <Line type='monotone' dataKey='日最高' stroke='#ff5500' />\n        <Line type='monotone' dataKey='日最低' stroke='#8884d8' />\n      </LineChart>\n    </div>\n  );\n};\n\nexport default LineChartSample;\n","import React, { PureComponent } from 'react';\nimport {\n  BarChart,\n  Bar,\n  Cell,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from 'recharts';\n\nexport const BarChartSample = () => {\n  const data = [\n    {\n      name: 1,\n      日平均: 5.6,\n      日最高: 10.3,\n      日最低: 1.4,\n    },\n    {\n      name: 2,\n      日平均: 7.2,\n      日最高: 11.6,\n      日最低: 3.3,\n    },\n    {\n      name: 3,\n      日平均: 10.6,\n      日最高: 15.4,\n      日最低: 6.2,\n    },\n    {\n      name: 4,\n      日平均: 13.6,\n      日最高: 19.0,\n      日最低: 9.2,\n    },\n    {\n      name: 5,\n      日平均: 20.0,\n      日最高: 25.3,\n      日最低: 15.3,\n    },\n    {\n      name: 6,\n      日平均: 21.8,\n      日最高: 25.8,\n      日最低: 18.5,\n    },\n    {\n      name: 7,\n      日平均: 24.1,\n      日最高: 27.5,\n      日最低: 21.6,\n    },\n    {\n      name: 8,\n      日平均: 28.4,\n      日最高: 32.8,\n      日最低: 25.2,\n    },\n    {\n      name: 9,\n      日平均: 25.1,\n      日最高: 29.4,\n      日最低: 21.7,\n    },\n    {\n      name: 10,\n      日平均: 19.4,\n      日最高: 23.3,\n      日最低: 16.4,\n    },\n    {\n      name: 11,\n      日平均: 13.1,\n      日最高: 17.7,\n      日最低: 9.3,\n    },\n    {\n      name: 12,\n      日平均: 8.5,\n      日最高: 12.6,\n      日最低: 5.2,\n    },\n  ];\n\n  return (\n    <div>\n      <h1>2019年 東京の平均気温(棒グラフ)</h1>\n      <BarChart\n        width={700}\n        height={500}\n        data={data}\n        margin={{\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5,\n        }}\n      >\n        <CartesianGrid strokeDasharray='3 3' />\n        <XAxis dataKey='name' unit='月' />\n        <YAxis unit='℃' />\n        <Tooltip />\n        <Legend />\n        <Bar dataKey='日平均' fill='#82ca9d' />\n        <Bar dataKey='日最高' fill='#ff5500' />\n        <Bar dataKey='日最低' fill='#8884d8' />\n      </BarChart>\n    </div>\n  );\n};\n\nexport default BarChartSample;\n","import React from 'react';\nimport LineChartSample from './LineChartSample';\nimport BarChartSample from './BarChartSample';\nimport './App.css';\n\nfunction App() {\n  const style = {\n    width: '90%',\n    margin: '0 auto',\n    marginTop: 100,\n    display: 'flex',\n  };\n  return (\n    <div className='App'>\n      <div style={style}>\n        <LineChartSample />\n        <BarChartSample />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}